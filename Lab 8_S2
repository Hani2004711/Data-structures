public class ArrayQueue<E> implements Queue<E>, Cloneable {
    private E[] data;
    private int front;
    private int size;

    public ArrayQueue() {
        this(DEFAULT_CAPACITY);
    }

    public ArrayQueue(int capacity) {
        data = (E[]) new Object[capacity];
        front = 0;
        size = 0;
    }

    public void enqueue(E element) {
        if (size == data.length) {
            resize(2 * data.length);
        }
        int back = (front + size) % data.length;
        data[back] = element;
        size++;
    }

    public E dequeue() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty");
        }
        E element = data[front];
        data[front] = null;
        front = (front + 1) % data.length;
        size--;
        if (size <= data.length / 4 && data.length > DEFAULT_CAPACITY) {
            resize(data.length / 2);
        }
        return element;
    }

    public E first() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty");
        }
        return data[front];
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public ArrayQueue<E> clone() {
        try {
            @SuppressWarnings("unchecked")
            ArrayQueue<E> copy = (ArrayQueue<E>) super.clone();
            copy.data = data.clone();
            return copy;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
    }

    private void resize(int capacity) {
        E[] newData = (E[]) new Object[capacity];
        for (int i = 0; i < size; i++) {
            newData[i] = data[(front + i) % data.length];
        }
        data = newData;
        front = 0;
    }

    private static final int DEFAULT_CAPACITY = 16;
}

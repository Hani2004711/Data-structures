class SinglyLinkedList {
  private static class Node {
    private int data;
    private Node next;

    private Node(int data) {
      this.data = data;
    }
  }

  private Node head;

  // Other methods for the SinglyLinkedList class go here

  public void reverse() {
    System.out.println("Reversing list L...");

    // Return if the list is empty or has only one node
    if (head == null || head.next == null) {
      System.out.println("List L is empty or has only one node. Returning.");
      return;
    }

    // Reverse the list using iterative approach
    System.out.println("Reversing list L using iterative approach...");
    Node previous = null;
    Node current = head;
    Node next = head.next;
    while (next != null) {
      current.next = previous;
      previous = current;
      current = next;
      next = next.next;
    }
    current.next = previous;
    head = current;

    System.out.println("List L reversed successfully.");
  }
}

import java.util.Arrays;

public class ArrayStack<T> implements Cloneable {
    private static final int DEFAULT_CAPACITY = 10;
    private T[] stackArray;
    private int top;

    @SuppressWarnings("unchecked")
    public ArrayStack() {
        stackArray = (T[]) new Object[DEFAULT_CAPACITY];
        top = -1;
    }

    @SuppressWarnings("unchecked")
    public ArrayStack(int capacity) {
        stackArray = (T[]) new Object[capacity];
        top = -1;
    }

    public void push(T element) {
        if (top == stackArray.length - 1) {
            expandCapacity();
        }
        top++;
        stackArray[top] = element;
    }

    public T pop() {
        if (isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        T element = stackArray[top];
        stackArray[top] = null;
        top--;
        return element;
    }

    public T peek() {
        if (isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        return stackArray[top];
    }

    public boolean isEmpty() {
        return top == -1;
    }

    public int size() {
        return top + 1;
    }

    private void expandCapacity() {
        stackArray = Arrays.copyOf(stackArray, stackArray.length * 2);
    }

    @SuppressWarnings("unchecked")
    public ArrayStack<T> clone() {
        ArrayStack<T> clonedStack = null;
        try {
            clonedStack = (ArrayStack<T>) super.clone();
            clonedStack.stackArray = Arrays.copyOf(this.stackArray, this.stackArray.length);
        } catch (CloneNotSupportedException e) {
            // This should never happen since we are implementing Cloneable
            throw new InternalError();
        }
        return clonedStack;
    }
}
